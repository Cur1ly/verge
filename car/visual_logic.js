/* eslint-disable */

/**
 * Generated by Verge3D Puzzles v.4.7.1
 * Fri, 06 Dec 2024 11:47:59 GMT
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */
function createPL(v3d = window.v3d) {

// global variables used in the init tab
const _initGlob = {
    percentage: 0,
    output: {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        },
    },
};


// global variables/constants used by puzzles' functions
var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.openedFileMeta = {};
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};
_pGlob.customEvents = new v3d.EventDispatcher();
_pGlob.eventListeners = [];
_pGlob.htmlElements = new Set();

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster(); // always check visibility

const createPzLib = ({ v3d=null, appInstance=null }) => {
    function generateUniqueName(name, isUniqueCb) {
        let uniqueName = name;
    
        if (isUniqueCb !== undefined) {
            while (!isUniqueCb(uniqueName)) {
                const r = uniqueName.match(/^(.*?)(\d+)$/);
                if (!r) {
                    uniqueName += '2';
                } else {
                    uniqueName = r[1] + (Number.parseInt(r[2], 10) + 1);
                }
            }
        }
    
        return uniqueName;
    }
        
    function isObjectWorthProcessing(obj) {
        return obj.type !== 'AmbientLight' && obj.name !== '' &&
                !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
                !obj.isAuxClippingMesh;
    }
        
    function getObjectByName(objName) {
        let objFound = null;
    
        const pGlobAvailable = _pGlob !== undefined;
        if (pGlobAvailable && objName in _pGlob.objCache) {
            objFound = _pGlob.objCache[objName] || null;
        }
    
        if (objFound && objFound.name === objName) {
            return objFound;
        }
    
        if (appInstance.scene) {
            appInstance.scene.traverse(obj => {
                if (!objFound && isObjectWorthProcessing(obj) && (obj.name === objName)) {
                    objFound = obj;
                    if (pGlobAvailable) {
                        _pGlob.objCache[objName] = objFound;
                    }
                }
            });
        }
        return objFound;
    }
        
    function generateUniqueObjectName(name) {
        return generateUniqueName(name, name => !Boolean(getObjectByName(name)));
    }
        
    function getObjectNamesByGroupName(groupName) {
        const objNameList = [];
        appInstance.scene.traverse(obj => {
            if (isObjectWorthProcessing(obj)) {
                const objGroupNames = obj.groupNames;
                if (!objGroupNames) {
                    return;
                }
    
                for (let i = 0; i < objGroupNames.length; i++) {
                    const objGroupName = objGroupNames[i];
                    if (objGroupName === groupName) {
                        objNameList.push(obj.name);
                    }
                }
            }
        });
        return objNameList;
    }
        
    function getAllObjectNames() {
        const objNameList = [];
        appInstance.scene.traverse(obj => {
            if (isObjectWorthProcessing(obj)) {
                objNameList.push(obj.name);
            }
        });
        return objNameList;
    }
        
    function retrieveObjectNamesAccum(currObjNames, namesAccum) {
        if (typeof currObjNames === 'string') {
            namesAccum.push(currObjNames);
        } else if (Array.isArray(currObjNames) && currObjNames[0] === 'GROUP') {
            const newObjNames = getObjectNamesByGroupName(currObjNames[1]);
            for (let i = 0; i < newObjNames.length; i++) {
                namesAccum.push(newObjNames[i]);
            }
        } else if (Array.isArray(currObjNames) && currObjNames[0] === 'ALL_OBJECTS') {
            const newObjNames = getAllObjectNames();
            for (let i = 0; i < newObjNames.length; i++) {
                namesAccum.push(newObjNames[i]);
            }
        } else if (Array.isArray(currObjNames)) {
            for (let i = 0; i < currObjNames.length; i++) {
                retrieveObjectNamesAccum(currObjNames[i], namesAccum);
            }
        }
    }
        
    function retrieveObjectNames(objNames) {
        const accum = [];
        retrieveObjectNamesAccum(objNames, accum);
        return accum.filter(name => name !== '');
    }
        
    function getObjectName(obj) {
        // auto-generated from a multi-material object, use parent name instead
        if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
            return obj.parent.name;
        } else {
            return obj.name;
        }
    }
        
    function areListenersSame(target0, type0, listener0, optionsOrUseCapture0,
            target1, type1, listener1, optionsOrUseCapture1) {
        const capture0 = Boolean(optionsOrUseCapture0 instanceof Object
                ? optionsOrUseCapture0.capture : optionsOrUseCapture0);
        const capture1 = Boolean(optionsOrUseCapture1 instanceof Object
                ? optionsOrUseCapture1.capture : optionsOrUseCapture1);
        return target0 === target1 && type0 === type1 && listener0 === listener1
                && capture0 === capture1;
    }
        
    function bindListener(target, type, listener, optionsOrUseCapture) {
        const alreadyExists = _pGlob.eventListeners.some(elem => {
            return areListenersSame(elem.target, elem.type, elem.listener,
                    elem.optionsOrUseCapture, target, type, listener,
                    optionsOrUseCapture);
        });
    
        if (!alreadyExists) {
            target.addEventListener(type, listener, optionsOrUseCapture);
            _pGlob.eventListeners.push({ target, type, listener,
                    optionsOrUseCapture });
        }
    }
        
    function initObjectPicking(callback, eventType, mouseDownUseTouchStart=false,
            allowedMouseButtons=null) {
    
        const elem = appInstance.renderer.domElement;
        bindListener(elem, eventType, pickListener);
    
        if (eventType === 'mousedown') {
    
            const touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
            bindListener(elem, touchEventName, pickListener);
    
        } else if (eventType === 'dblclick') {
    
            let prevTapTime = 0;
    
            function doubleTapCallback(event) {
                const now = new Date().getTime();
                const timesince = now - prevTapTime;
    
                if (timesince < 600 && timesince > 0) {
                    pickListener(event);
                    prevTapTime = 0;
                    return;
                }
    
                prevTapTime = new Date().getTime();
            }
    
            const touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
            bindListener(elem, touchEventName, doubleTapCallback);
        }
    
        const raycaster = new v3d.Raycaster();
    
        function pickListener(event) {
    
            // to handle unload in loadScene puzzle
            if (!appInstance.getCamera()) {
                return;
            }
    
            event.preventDefault();
    
            let xNorm = 0;
            let yNorm = 0;
            if (event instanceof MouseEvent) {
                if (allowedMouseButtons !== null && allowedMouseButtons.indexOf(event.button) === -1) {
                    return;
                }
                xNorm = event.offsetX / elem.clientWidth;
                yNorm = event.offsetY / elem.clientHeight;
            } else if (event instanceof TouchEvent) {
                const rect = elem.getBoundingClientRect();
                xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
                yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
            }
    
            _pGlob.screenCoords.x = xNorm * 2 - 1;
            _pGlob.screenCoords.y = -yNorm * 2 + 1;
            raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
    
            const objList = [];
            appInstance.scene.traverse(obj => objList.push(obj));
    
            const intersects = raycaster.intersectObjects(objList, false);
            callback(intersects, event);
        }
    }
        
    function isObjectAmongObjects(objNameToCheck, objNames) {
        if (!objNameToCheck) {
            return false;
        }
    
        for (let i = 0; i < objNames.length; i++) {
            if (objNameToCheck === objNames[i]) {
                return true;
            } else {
                // also check children which are auto-generated for multi-material objects
                const obj = getObjectByName(objNames[i]);
                if (obj && obj.type === 'Group') {
                    for (let j = 0; j < obj.children.length; j++) {
                        if (objNameToCheck === obj.children[j].name) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }
        
    function getSceneAnimFrameRate(scene) {
        if (scene && 'animFrameRate' in scene.userData) {
            return scene.userData.animFrameRate;
        }
        return 24;
    }
        
    function getSceneByAction(action) {
        const root = action.getRoot();
        let scene = root.type === 'Scene' ? root : null;
        root.traverseAncestors(ancObj => {
            if (ancObj.type === 'Scene') {
                scene = ancObj;
            }
        });
        return scene;
    }
        
    function getElement(id, isParent=false) {
        let elem;
        if (Array.isArray(id) && id[0] === 'CONTAINER') {
            if (appInstance !== null) {
                elem = appInstance.container;
            } else if (typeof _initGlob !== 'undefined') {
                // if we are on the initialization stage, we still can have access
                // to the container element
                const contId = _initGlob.container;
                elem = isParent ? parent.document.getElementById(contId)
                        : document.getElementById(contId);
            }
        } else if (Array.isArray(id) && id[0] === 'WINDOW') {
            elem = isParent ? parent : window;
        } else if (Array.isArray(id) && id[0] === 'DOCUMENT') {
            elem = isParent ? parent.document : document;
        } else if (Array.isArray(id) && id[0] === 'BODY') {
            elem = isParent ? parent.document.body : document.body;
        } else if (Array.isArray(id) && id[0] === 'QUERYSELECTOR') {
            elem = isParent ? parent.document.querySelector(id)
                    : document.querySelector(id);
        } else {
            elem = isParent ? parent.document.getElementById(id)
                    : document.getElementById(id);
        }
        return elem;
    }
        
    function getElements(ids, isParent=false) {
        const elems = [];
        if (Array.isArray(ids) && ids[0] !== 'CONTAINER' && ids[0] !== 'WINDOW'
                && ids[0] !== 'DOCUMENT' && ids[0] !== 'BODY'
                && ids[0] !== 'QUERYSELECTOR') {
            for (let i = 0; i < ids.length; i++) {
                elems.push(getElement(ids[i], isParent));
            }
        } else {
            elems.push(getElement(ids, isParent));
        }
        return elems;
    }

    return {
        generateUniqueObjectName, getObjectByName, retrieveObjectNames, getObjectName,
        initObjectPicking, isObjectAmongObjects, bindListener, getSceneAnimFrameRate,
        getSceneByAction, getElements,
    };
};

var PL = {};
// backward compatibility
if (v3d[Symbol.toStringTag] !== 'Module') {
    v3d.PL = v3d.puzzles = PL;
}

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    const PzLib = createPzLib({ v3d });

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    
    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

const PzLib = createPzLib({ v3d, appInstance });

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}



var pause, door1, door2, weel2, pod1, bag, cap, weel1, pod2, annot_visible;

// addAnnotation and removeAnnotation puzzles
function handleAnnot(add, annot, objSelector, contents, id, name) {
    var objNames = PzLib.retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = PzLib.getObjectByName(objName);
        if (!obj)
            continue;
        // check if it already has an annotation and remove it
        for (var j = 0; j < obj.children.length; j++) {
            var child = obj.children[j];
            if (child.type == "Annotation") {
                // delete all childs of annotation
                child.traverse(function(child2) {
                    if (child2.isAnnotation)
                        child2.dispose();
                    });
                obj.remove(child);
            }
        }
        if (add) {
            var aObj = new v3d.Annotation(appInstance.container, annot, contents);
            aObj.name = PzLib.generateUniqueObjectName(name ? name : annot);
            aObj.fadeObscured = _pGlob.fadeAnnotations;
            if (id) {
                aObj.annotation.id = id;
                aObj.annotationDialog.id = id+'_dialog';
            }
            obj.add(aObj);
        }
    }
}

// outline puzzle
function outline(objSelector, doWhat) {
    var objNames = PzLib.retrieveObjectNames(objSelector);

    if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
        return;
    var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = PzLib.getObjectByName(objName);
        if (!obj)
            continue;
        if (doWhat == "ENABLE") {
            if (outlineArray.indexOf(obj) == -1)
                outlineArray.push(obj);
        } else {
            var index = outlineArray.indexOf(obj);
            if (index > -1)
                outlineArray.splice(index, 1);
        }
    }
}

// whenHovered puzzle
PzLib.initObjectPicking(function(intersects, event) {

    var prevHovered = _pGlob.hoveredObject;
    var currHovered = '';

    // the event might happen before hover registration
    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    // search for closest hovered object

    var lastIntersectIndex = Infinity;
    _pGlob.objHoverInfo.forEach(function(el) {
        var maxIntersects = el.xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = PzLib.getObjectName(obj);

            if (PzLib.isObjectAmongObjects(objName, PzLib.retrieveObjectNames(el.objSelector)) && i <= lastIntersectIndex) {
                currHovered = objName;
                lastIntersectIndex = i;
            }
        }
    });

    if (prevHovered == currHovered) return;

    // first - all "out" callbacks, then - all "over"
    _pGlob.objHoverInfo.forEach(function(el) {
        if (PzLib.isObjectAmongObjects(prevHovered, PzLib.retrieveObjectNames(el.objSelector))) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = prevHovered;
            el.callbacks[1](event);
        }
    });

    _pGlob.objHoverInfo.forEach(function(el) {
        if (PzLib.isObjectAmongObjects(currHovered, PzLib.retrieveObjectNames(el.objSelector))) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = currHovered;
            el.callbacks[0](event);
        }
    });

    _pGlob.hoveredObject = currHovered;
}, 'mousemove');

// whenHovered puzzle
function registerOnHover(objSelector, xRay, cbOver, cbOut) {

    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    _pGlob.objHoverInfo.push({
        objSelector: objSelector,
        callbacks: [cbOver, cbOut],
        xRay: xRay
    });
}

// getAnimations puzzle
function getAnimations(objSelector) {
    const objNames = PzLib.retrieveObjectNames(objSelector);

    const animations = [];
    for (let i = 0; i < objNames.length; i++) {
        const objName = objNames[i];
        if (!objName)
            continue;
        // use objName as animName - for now we have one-to-one match
        const action = v3d.SceneUtils.getAnimationActionByName(appInstance, objName);
        if (action)
            animations.push(objName);
    }
    return animations;
}

_pGlob.animMixerCallbacks = [];

var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished)) {
            PzLib.bindListener(appInstance.mixer, 'finished', onMixerFinished);
        }
    };

}();

// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = PzLib.getSceneByAction(action);
                var frameRate = PzLib.getSceneAnimFrameRate(scene);

                action.repetitions = Infinity;

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = PzLib.getSceneByAction(action);
            var frameRate = PzLib.getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        case 'SET_SPEED':
            var timeScale = parseFloat(speed);
            action.timeScale = rev ? -timeScale : timeScale;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}

// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = PzLib.getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;

        PzLib.bindListener(elem, eventType, callback);
    }
}

// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = PzLib.retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = PzLib.getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
        obj.resolveMultiMaterial().forEach(function(objR) {
            objR.visible = bool;
        });
    }
}

// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}

// whenClicked puzzle
function registerOnClick(objSelector, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {

    // for AR/VR
    _pGlob.objClickInfo = _pGlob.objClickInfo || [];

    _pGlob.objClickInfo.push({
        objSelector: objSelector,
        callbacks: [cbDo, cbIfMissedDo]
    });

    PzLib.initObjectPicking(function(intersects, event) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = PzLib.getObjectName(obj);
            var objNames = PzLib.retrieveObjectNames(objSelector);

            if (PzLib.isObjectAmongObjects(objName, objNames)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo(event);
            }
        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo(event);
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}

// autoRotateCamera puzzle
function autoRotateCamera(enabled, speed) {

    if (appInstance.controls && appInstance.controls instanceof v3d.OrbitControls) {
        appInstance.controls.autoRotate = enabled;
        appInstance.controls.autoRotateSpeed = speed;
    } else {
        console.error('autorotate camera: Wrong controls type');
    }
}

// setTimer puzzle
function registerSetTimer(id, timeout, callback, repeat) {

    if (id in _pGlob.intervalTimers) {
        window.clearInterval(_pGlob.intervalTimers[id]);
    }

    _pGlob.intervalTimers[id] = window.setInterval(function() {
        if (repeat-- > 0) {
            callback(_pGlob.intervalTimers[id]);
        }
    }, 1000 * timeout);
}


registerOnHover('122 3D фрагмент_90 (Assembly_52_grb (Lego_RallyCar_52_g', false, function() {
  handleAnnot(true, 'Багажник', '122 3D фрагмент_90 (Assembly_52_grb (Lego_RallyCar_52_g', '', 'PD', undefined);
  outline('122 3D фрагмент_90 (Assembly_52_grb (Lego_RallyCar_52_g', 'ENABLE');
}, function() {
  handleAnnot(false, '', '122 3D фрагмент_90 (Assembly_52_grb (Lego_RallyCar_52_g', '', '', undefined);
  outline('122 3D фрагмент_90 (Assembly_52_grb (Lego_RallyCar_52_g', 'DISABLE');
});
registerOnHover('96 3D фрагмент_72 (Parts_97_White_grb (Lego_RallyCar_97', false, function() {
  handleAnnot(true, 'Капот', '96 3D фрагмент_72 (Parts_97_White_grb (Lego_RallyCar_97', '', 'PD', undefined);
  outline('96 3D фрагмент_72 (Parts_97_White_grb (Lego_RallyCar_97', 'ENABLE');
}, function() {
  handleAnnot(false, '', '96 3D фрагмент_72 (Parts_97_White_grb (Lego_RallyCar_97', '', '', undefined);
  outline('96 3D фрагмент_72 (Parts_97_White_grb (Lego_RallyCar_97', 'DISABLE');
});
registerOnHover('111 3D фрагмент_84 (Assembly_47_grb (Lego_RallyCar_47_g', false, function() {
  handleAnnot(true, 'Правая дверь', '111 3D фрагмент_84 (Assembly_47_grb (Lego_RallyCar_47_g', '', 'PD', undefined);
  outline('111 3D фрагмент_84 (Assembly_47_grb (Lego_RallyCar_47_g', 'ENABLE');
}, function() {
  handleAnnot(false, '', '111 3D фрагмент_84 (Assembly_47_grb (Lego_RallyCar_47_g', '', '', undefined);
  outline('111 3D фрагмент_84 (Assembly_47_grb (Lego_RallyCar_47_g', 'DISABLE');
});
registerOnHover('110 3D фрагмент_83 (Assembly_46_grb (Lego_RallyCar_46_g', false, function() {
  handleAnnot(true, 'Левая дверь', '110 3D фрагмент_83 (Assembly_46_grb (Lego_RallyCar_46_g', '', 'PD', undefined);
  outline('110 3D фрагмент_83 (Assembly_46_grb (Lego_RallyCar_46_g', 'ENABLE');
}, function() {
  handleAnnot(false, '', '110 3D фрагмент_83 (Assembly_46_grb (Lego_RallyCar_46_g', '', '', undefined);
  outline('110 3D фрагмент_83 (Assembly_46_grb (Lego_RallyCar_46_g', 'DISABLE');
});
registerOnHover('130 3D фрагмент_96 (Assembly_59_grb (Lego_RallyCar_59_g', false, function() {
  handleAnnot(true, 'Левое колесо', '130 3D фрагмент_96 (Assembly_59_grb (Lego_RallyCar_59_g', '', 'PD', undefined);
  handleAnnot(true, 'Правое колесо', '131 3D фрагмент_97 (Assembly_59_grb (Lego_RallyCar_59_g', '', 'PD', undefined);
  outline('130 3D фрагмент_96 (Assembly_59_grb (Lego_RallyCar_59_g', 'ENABLE');
  outline('131 3D фрагмент_97 (Assembly_59_grb (Lego_RallyCar_59_g', 'ENABLE');
}, function() {
  handleAnnot(false, '', '130 3D фрагмент_96 (Assembly_59_grb (Lego_RallyCar_59_g', '', '', undefined);
  handleAnnot(false, '', '131 3D фрагмент_97 (Assembly_59_grb (Lego_RallyCar_59_g', '', '', undefined);
  outline('130 3D фрагмент_96 (Assembly_59_grb (Lego_RallyCar_59_g', 'DISABLE');
  outline('131 3D фрагмент_97 (Assembly_59_grb (Lego_RallyCar_59_g', 'DISABLE');
});
registerOnHover('131 3D фрагмент_97 (Assembly_59_grb (Lego_RallyCar_59_g', false, function() {
  handleAnnot(true, 'Левое колесо', '130 3D фрагмент_96 (Assembly_59_grb (Lego_RallyCar_59_g', '', 'PD', undefined);
  handleAnnot(true, 'Правое колесо', '131 3D фрагмент_97 (Assembly_59_grb (Lego_RallyCar_59_g', '', 'PD', undefined);
  outline('130 3D фрагмент_96 (Assembly_59_grb (Lego_RallyCar_59_g', 'ENABLE');
  outline('131 3D фрагмент_97 (Assembly_59_grb (Lego_RallyCar_59_g', 'ENABLE');
}, function() {
  handleAnnot(false, '', '130 3D фрагмент_96 (Assembly_59_grb (Lego_RallyCar_59_g', '', '', undefined);
  handleAnnot(false, '', '131 3D фрагмент_97 (Assembly_59_grb (Lego_RallyCar_59_g', '', '', undefined);
  outline('130 3D фрагмент_96 (Assembly_59_grb (Lego_RallyCar_59_g', 'DISABLE');
  outline('131 3D фрагмент_97 (Assembly_59_grb (Lego_RallyCar_59_g', 'DISABLE');
});
registerOnHover('55 3D фрагмент_44 (Assembly_21_grb (Lego_RallyCar_21_gr', false, function() {
  handleAnnot(true, 'Правый подкрылок', '55 3D фрагмент_44 (Assembly_21_grb (Lego_RallyCar_21_gr', '', 'PD', undefined);
  handleAnnot(true, 'Левый подкрылок', '57 Симметрия_13', '', 'PD', undefined);
  outline('55 3D фрагмент_44 (Assembly_21_grb (Lego_RallyCar_21_gr', 'ENABLE');
  outline('57 Симметрия_13', 'ENABLE');
}, function() {
  handleAnnot(false, '', '55 3D фрагмент_44 (Assembly_21_grb (Lego_RallyCar_21_gr', '', '', undefined);
  handleAnnot(false, '', '57 Симметрия_13', '', '', undefined);
  outline('55 3D фрагмент_44 (Assembly_21_grb (Lego_RallyCar_21_gr', 'DISABLE');
  outline('57 Симметрия_13', 'DISABLE');
});
registerOnHover('57 Симметрия_13', false, function() {
  handleAnnot(true, 'Правый подкрылок', '55 3D фрагмент_44 (Assembly_21_grb (Lego_RallyCar_21_gr', '', 'PD', undefined);
  handleAnnot(true, 'Левый подкрылок', '57 Симметрия_13', '', 'PD', undefined);
  outline('55 3D фрагмент_44 (Assembly_21_grb (Lego_RallyCar_21_gr', 'ENABLE');
  outline('57 Симметрия_13', 'ENABLE');
}, function() {
  handleAnnot(false, '', '55 3D фрагмент_44 (Assembly_21_grb (Lego_RallyCar_21_gr', '', '', undefined);
  handleAnnot(false, '', '57 Симметрия_13', '', '', undefined);
  outline('55 3D фрагмент_44 (Assembly_21_grb (Lego_RallyCar_21_gr', 'DISABLE');
  outline('57 Симметрия_13', 'DISABLE');
});

eventHTMLElem('click', 'primer', true, function(event) {

  operateAnimation('PLAY', getAnimations(['GROUP', 'anime']), null, null, 'LoopOnce', 1,
          function() {}, false);

      });

pause = false;
registerOnClick('Play', false, false, [0,1,2], function() {
  changeVis('Pause', false);
  if (pause == false) {

    operateAnimation('RESUME', getAnimations(['GROUP', 'anime']), null, null, 'AUTO', 1,
            function() {}, false);

        } else {

    operateAnimation('PLAY', getAnimations(['GROUP', 'anime']), null, null, 'LoopOnce', 1,
            function() {}, false);

        }
  changeVis('Play', false);
  registerSetTimeout(0, function() {
    changeVis('Pause', true);
  });
}, function() {});
registerOnClick('Pause', false, false, [0,1,2], function() {

  operateAnimation('PAUSE', getAnimations(['GROUP', 'anime']), null, null, 'AUTO', 1,
          function() {}, false);

      pause = true;
  changeVis('Pause', false);
  registerSetTimeout(0, function() {
    changeVis('Play', true);
  });
}, function() {});
pause = true;
registerOnClick('Reset', false, false, [0,1,2], function() {
  changeVis('Pause', false);
  registerSetTimeout(0, function() {
    changeVis('Play', true);
  });
  if (annot_visible == true) {

    operateAnimation('RESUME', getAnimations(['GROUP', 'anime']), null, null, 'AUTO', 1,
            function() {}, false);

        } else {

    operateAnimation('PLAY', getAnimations(['GROUP', 'anime']), 0, 50, 'LoopOnce', 2,
            function() {}, true);

        }
}, function() {});

registerOnClick(['ALL_OBJECTS'], false, false, [0,1,2], function() {
  autoRotateCamera(false, 2);
  registerSetTimer('myTimer', 5, function() {
    autoRotateCamera(true, 2);
  }, Infinity);
}, function() {});

eventHTMLElem('click', 'primer2', true, function(event) {

  operateAnimation('PLAY', getAnimations(['GROUP', 'anime']), 0, 50, 'LoopOnce', 2,
          function() {}, true);

      });

door1 = true;
registerOnClick('111 3D фрагмент_84 (Assembly_47_grb (Lego_RallyCar_47_g', false, false, [0,1,2], function() {
  if (door1 == true) {

    operateAnimation('PLAY', '111 3D фрагмент_84 (Assembly_47_grb (Lego_RallyCar_47_g', 0, 50, 'LoopOnce', 10,
            function() {
      door1 = false;
    }, false);

        } else if (door1 == false) {

    operateAnimation('PLAY', '111 3D фрагмент_84 (Assembly_47_grb (Lego_RallyCar_47_g', 0, 50, 'LoopOnce', 10,
            function() {
      door1 = true;
    }, true);

        }
}, function() {});

door2 = true;
registerOnClick('110 3D фрагмент_83 (Assembly_46_grb (Lego_RallyCar_46_g', false, false, [0,1,2], function() {
  if (door2 == true) {

    operateAnimation('PLAY', '110 3D фрагмент_83 (Assembly_46_grb (Lego_RallyCar_46_g', 0, 50, 'LoopOnce', 10,
            function() {
      door2 = false;
    }, false);

        } else if (door2 == false) {

    operateAnimation('PLAY', '110 3D фрагмент_83 (Assembly_46_grb (Lego_RallyCar_46_g', 0, 50, 'LoopOnce', 10,
            function() {
      door2 = true;
    }, true);

        }
}, function() {});

weel2 = true;
registerOnClick('130 3D фрагмент_96 (Assembly_59_grb (Lego_RallyCar_59_g', false, false, [0,1,2], function() {
  if (weel2 == true) {

    operateAnimation('PLAY', '131 3D фрагмент_97 (Assembly_59_grb (Lego_RallyCar_59_g', 0, 50, 'LoopOnce', 2,
            function() {
      weel2 = false;
    }, false);


    operateAnimation('PLAY', '130 3D фрагмент_96 (Assembly_59_grb (Lego_RallyCar_59_g', 0, 50, 'LoopOnce', 2,
            function() {
      weel1 = false;
    }, false);

        } else if (weel2 == false) {

    operateAnimation('PLAY', '130 3D фрагмент_96 (Assembly_59_grb (Lego_RallyCar_59_g', 0, 50, 'LoopOnce', 2,
            function() {
      weel2 = true;
    }, true);


    operateAnimation('PLAY', '131 3D фрагмент_97 (Assembly_59_grb (Lego_RallyCar_59_g', 0, 50, 'LoopOnce', 2,
            function() {
      weel1 = true;
    }, true);

        }
}, function() {});
weel1 = true;
registerOnClick('131 3D фрагмент_97 (Assembly_59_grb (Lego_RallyCar_59_g', false, false, [0,1,2], function() {
  if (weel1 == true) {

    operateAnimation('PLAY', '131 3D фрагмент_97 (Assembly_59_grb (Lego_RallyCar_59_g', 0, 50, 'LoopOnce', 2,
            function() {
      weel1 = false;
    }, false);


    operateAnimation('PLAY', '130 3D фрагмент_96 (Assembly_59_grb (Lego_RallyCar_59_g', 0, 50, 'LoopOnce', 2,
            function() {
      weel2 = false;
    }, false);

        } else if (weel1 == false) {

    operateAnimation('PLAY', '130 3D фрагмент_96 (Assembly_59_grb (Lego_RallyCar_59_g', 0, 50, 'LoopOnce', 2,
            function() {
      weel1 = true;
    }, true);


    operateAnimation('PLAY', '131 3D фрагмент_97 (Assembly_59_grb (Lego_RallyCar_59_g', 0, 50, 'LoopOnce', 2,
            function() {
      weel2 = true;
    }, true);

        }
}, function() {});

pod1 = true;
registerOnClick('55 3D фрагмент_44 (Assembly_21_grb (Lego_RallyCar_21_gr', false, false, [0,1,2], function() {
  if (pod1 == true) {

    operateAnimation('PLAY', '55 3D фрагмент_44 (Assembly_21_grb (Lego_RallyCar_21_gr', 0, 50, 'LoopOnce', 10,
            function() {
      pod1 = false;
    }, false);

        } else if (pod1 == false) {

    operateAnimation('PLAY', '55 3D фрагмент_44 (Assembly_21_grb (Lego_RallyCar_21_gr', 0, 50, 'LoopOnce', 10,
            function() {
      pod1 = true;
    }, true);

        }
}, function() {});
pod2 = true;
registerOnClick('57 Симметрия_13', false, false, [0,1,2], function() {
  if (pod2 == true) {

    operateAnimation('PLAY', '57 Симметрия_13', 0, 50, 'LoopOnce', 10,
            function() {
      pod2 = false;
    }, false);

        } else if (pod2 == false) {

    operateAnimation('PLAY', '57 Симметрия_13', 0, 50, 'LoopOnce', 10,
            function() {
      pod2 = true;
    }, true);

        }
}, function() {});

bag = true;
registerOnClick('122 3D фрагмент_90 (Assembly_52_grb (Lego_RallyCar_52_g', false, false, [0,1,2], function() {
  if (bag == true) {

    operateAnimation('PLAY', '122 3D фрагмент_90 (Assembly_52_grb (Lego_RallyCar_52_g', 0, 50, 'LoopOnce', 10,
            function() {
      bag = false;
    }, false);

        } else if (bag == false) {

    operateAnimation('PLAY', '122 3D фрагмент_90 (Assembly_52_grb (Lego_RallyCar_52_g', 0, 50, 'LoopOnce', 10,
            function() {
      bag = true;
    }, true);

        }
}, function() {});

cap = true;
registerOnClick('96 3D фрагмент_72 (Parts_97_White_grb (Lego_RallyCar_97', false, false, [0,1,2], function() {
  if (cap == true) {

    operateAnimation('PLAY', '96 3D фрагмент_72 (Parts_97_White_grb (Lego_RallyCar_97', 0, 50, 'LoopOnce', 10,
            function() {
      cap = false;
    }, false);

        } else if (cap == false) {

    operateAnimation('PLAY', '96 3D фрагмент_72 (Parts_97_White_grb (Lego_RallyCar_97', 0, 50, 'LoopOnce', 10,
            function() {
      cap = true;
    }, true);

        }
}, function() {});



} // end of PL.init function

PL.disposeListeners = function() {
    if (_pGlob) {
        _pGlob.eventListeners.forEach(({ target, type, listener, optionsOrUseCapture }) => {
            target.removeEventListener(type, listener, optionsOrUseCapture);
        });
        _pGlob.eventListeners.length = 0;
    }
}

PL.disposeHTMLElements = function() {
    if (_pGlob) {
        _pGlob.htmlElements.forEach(elem => {
            elem.remove();
        });
        _pGlob.htmlElements.clear();
    }
}

PL.dispose = function() {
    PL.disposeListeners();
    PL.disposeHTMLElements();
    _pGlob = null;
    // backward compatibility
    if (v3d[Symbol.toStringTag] !== 'Module') {
        delete v3d.PL;
        delete v3d.puzzles;
    }
}



return PL;

}

export { createPL };
